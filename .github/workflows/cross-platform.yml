name: Cross-Platform Build

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    build:
        strategy:
            matrix:
                include:
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact-name: windows-x64
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      artifact-name: windows-arm64
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact-name: linux-x64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      artifact-name: linux-arm64

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Set up JDK 11
              uses: actions/setup-java@v4
              with:
                  java-version: "11"
                  distribution: "temurin"

            - name: Set up Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install cross-compilation tools (Linux ARM64)
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Cache Maven dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

            - name: Cache Rust dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Build with Maven
              run: mvn clean package -DskipTests

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: monochat-${{ matrix.artifact-name }}
                  path: target/*.jar

    package:
        needs: build
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v3

            - name: Set up JDK 11
              uses: actions/setup-java@v4
              with:
                  java-version: "11"
                  distribution: "temurin"

            - name: Create final package
              run: |
                  # This step would combine all platform-specific builds into a single JAR
                  # Implementation depends on your specific packaging requirements
                  echo "Creating universal JAR with all platform libraries..."
                  ls -la monochat-*/

            - name: Upload final package
              uses: actions/upload-artifact@v3
              with:
                  name: monochat-universal
                  path: target/*.jar
